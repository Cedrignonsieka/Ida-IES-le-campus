# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1sF0Rd55ZM6_Y_LhwNEiWvP3snUNdET-k
"""

!pip install psycopg2-binary

import psycopg2

# üîê Infos de connexion √† ta base de donn√©es Render
DB_HOST = 'dpg-d2h1df7diees73e201jg-a.oregon-postgres.render.com'
DB_NAME = 'cedric_02bc'
DB_USER = 'cedric_02bc_user'
DB_PASS = 'K0a9OldVn97I9bhRoxxB2yuyxsepNqjF'
DB_PORT = '5432'

# üîå Connexion et test
try:
    conn = psycopg2.connect(
        host=DB_HOST,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASS,
        port=DB_PORT
    )
    cursor = conn.cursor()

    cursor.execute("SELECT NOW();")
    now = cursor.fetchone()
    print("‚úÖ Connexion r√©ussie ! Heure actuelle :", now)

    conn.close()

except Exception as e:
    print("‚ùå Erreur de connexion :", e)

try:
    conn = psycopg2.connect(
        host=DB_HOST,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASS,
        port=DB_PORT
    )
    cursor = conn.cursor()

    # Cr√©ation de la table des utilisateurs
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS users (
        id SERIAL PRIMARY KEY,
        nom TEXT NOT NULL,
        email TEXT UNIQUE NOT NULL,
        mot_de_passe TEXT NOT NULL,
        avatar_base64 TEXT
    )
    """)

    # Cr√©ation de la table des posts
    cursor.execute("""
    CREATE TABLE IF NOT EXISTS posts (
        id SERIAL PRIMARY KEY,
        user_id INTEGER REFERENCES users(id) ON DELETE CASCADE,
        contenu TEXT NOT NULL,
        date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
    )
    """)

    conn.commit()
    conn.close()
    print("‚úÖ Tables 'users' et 'posts' cr√©√©es avec succ√®s.")

except Exception as e:
    print("‚ùå Erreur lors de la cr√©ation des tables :", e)

try:
    conn = psycopg2.connect(
        host=DB_HOST,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASS,
        port=DB_PORT
    )
    cursor = conn.cursor()

    # üë§ Exemple d'utilisateur
    nom = "Jean Dupont"
    email = "jean@example.com"
    mot_de_passe = "monmotdepasse123"  # ‚ö†Ô∏è √Ä hasher plus tard en prod
    avatar_base64 = None  # ou une cha√Æne base64 si tu veux tester

    # üìù Insertion dans la table
    cursor.execute("""
    INSERT INTO users (nom, email, mot_de_passe, avatar_base64)
    VALUES (%s, %s, %s, %s)
    """, (nom, email, mot_de_passe, avatar_base64))

    conn.commit()
    conn.close()
    print("‚úÖ Utilisateur ajout√© avec succ√®s.")

except Exception as e:
    print("‚ùå Erreur lors de l‚Äôajout :", e)

try:
    conn = psycopg2.connect(
        host=DB_HOST,
        dbname=DB_NAME,
        user=DB_USER,
        password=DB_PASS,
        port=DB_PORT
    )
    cursor = conn.cursor()

    cursor.execute("SELECT id, nom, email FROM users ORDER BY id ASC")
    utilisateurs = cursor.fetchall()

    print("üìã Liste des utilisateurs :")
    for u in utilisateurs:
        print(f"ID: {u[0]} | Nom: {u[1]} | Email: {u[2]}")

    conn.close()

except Exception as e:
    print("‚ùå Erreur lors de la lecture des utilisateurs :", e)

def connexion_utilisateur(email, mot_de_passe):
    try:
        conn = psycopg2.connect(
            host=DB_HOST,
            dbname=DB_NAME,
            user=DB_USER,
            password=DB_PASS,
            port=DB_PORT
        )
        cursor = conn.cursor()

        # Rechercher un utilisateur avec cet email
        cursor.execute("SELECT id, nom, mot_de_passe FROM users WHERE email = %s", (email,))
        user = cursor.fetchone()

        if not user:
            print("‚ùå Utilisateur non trouv√©.")
            return

        id_user, nom, mot_de_passe_en_base = user

        # Comparaison des mots de passe
        if mot_de_passe == mot_de_passe_en_base:
            print(f"‚úÖ Connexion r√©ussie ! Bienvenue, {nom}. (ID utilisateur : {id_user})")
        else:
            print("‚ùå Mot de passe incorrect.")

        conn.close()

    except Exception as e:
        print("‚ùå Erreur lors de l'authentification :", e)